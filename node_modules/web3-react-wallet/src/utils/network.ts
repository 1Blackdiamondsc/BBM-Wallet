export const setupNetwork = async (conf: any): Promise<boolean> => {
  const provider = (window as any).ethereum;

  const chains: any = {
    1: {
      chainId: "0x1",
      chainName: "Ethereum Mainnet",
      nativeCurrency: {
        name: "ETH",
        symbol: "ETH",
        decimals: 18,
      },
      rpcUrls: [`https://mainnet.infura.io/v3/${conf && conf.infuraId ? conf.infuraId : "9876zyxw4321dcba"}`],
      blockExplorerUrls: ["https://etherscan.io"],
    },
    4: {
      chainId: "0x4",
      chainName: "Rinkeby Test Network",
      nativeCurrency: {
        name: "ETH",
        symbol: "ETH",
        decimals: 18,
      },
      rpcUrls: [`https://rinkeby.infura.io/v3/${conf && conf.infuraId ? conf.infuraId : "9876zyxw4321dcba"}`],
      blockExplorerUrls: ["https://rinkeby.etherscan.io"],
    }
  };

  if (provider) {
    try {
      await provider
        .request({
          method: "wallet_addEthereumChain",
          params: [chains[conf.chainId]],
        })
        .catch(() =>
          provider.request({
            method: "wallet_switchEthereumChain",
            params: [{ chainId: `0x${conf.chainId.toString(16)}` }],
          })
        );
      return true;
    } catch (error) {
      console.error("Failed to setup the network in Metamask:", error);
      return false;
    }
  } else {
    console.error("Can't setup said network on metamask because window.ethereum is undefined");
    return false;
  }
};