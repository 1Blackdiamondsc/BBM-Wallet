import { WalletConnectConnector } from "@web3-react/walletconnect-connector";
import { InjectedConnector } from "@web3-react/injected-connector";
import { JsonRpcFetchFunc, Web3Provider } from "@ethersproject/providers";
import { useCallback } from "react";

export enum ConnectorNames {
  Injected = "MetaMask",
  WalletConnect = "WalletConnect",
}

const providers = (): {
  chainId: any;
  injected: any;
  walletconnect: any;
  connectorsByName: any;
  getLibrary: (provider: JsonRpcFetchFunc) => Web3Provider;
} => {

  const chainId = useCallback((conf) => {
    return conf && conf.chainId ? conf.chainId : 1;
  }, [])

  const injected = useCallback((conf) => {
    return new InjectedConnector({ supportedChainIds: [conf && conf.chainId ? conf.chainId : 1] });
  }, [])

  const walletconnect = useCallback((conf?: any) => {
    return new WalletConnectConnector({
      qrcode: true,
      chainId: conf && conf.chainId ? conf.chainId : 1,
      // pollingInterval: 12000,
      supportedChainIds: [conf && conf.chainId ? conf.chainId : 1],
      infuraId: conf ? conf.infuraId : "9876zyxw4321dcba",
      clientMeta: {
        name: conf ? conf.websiteName : "abcdefg",
        description: conf ? conf.websiteDescription : "abcdefg",
        icons: [conf ? conf.websiteIconURL : "abcdefg"],
        url: conf ? conf.websiteURL : "abcdefg",
      },
    });
  }, [])

  const connectorsByName = useCallback((connectorID, conf) => {
    const connectors: any = {
      [ConnectorNames.Injected]: injected(conf),
      [ConnectorNames.WalletConnect]: walletconnect(conf),
    }
    return connectors[connectorID]
  }, [])
  
  const getLibrary = (provider: JsonRpcFetchFunc): Web3Provider => {
    const library = new Web3Provider(provider);
    library.pollingInterval = 12000;
    return library;
  };

  return { chainId, injected, walletconnect, connectorsByName, getLibrary };
};

export default providers;